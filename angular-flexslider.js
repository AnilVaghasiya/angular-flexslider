// Generated by CoffeeScript 1.6.2
(function() {
  'use strict';  angular.module('angular-flexslider', []).directive('flexSlider', function($parse, $timeout) {
    return {
      restrict: 'AE',
      scope: false,
      replace: true,
      transclude: true,
      template: '<div class="flexslider-container"></div>',
      compile: function(element, attr, linker) {
        var collectionString, flexsliderDiv, indexString, match, oldCollection, slidesItems, trackBy;

        match = attr.slide.match(/^\s*(.+)\s+in\s+(.*?)(?:\s+track\s+by\s+(.+?))?\s*$/);
        indexString = match[1];
        collectionString = match[2];
        trackBy = angular.isDefined(match[3]) ? $parse(match[3]) : $parse("" + indexString);
        flexsliderDiv = null;
        slidesItems = [];
        oldCollection = null;
        return function($scope, $element) {
          var addSlide, getTrackFromItem, removeSlide;

          getTrackFromItem = function(collectionItem) {
            var locals;

            locals = {};
            locals[indexString] = collectionItem;
            return trackBy($scope, locals);
          };
          addSlide = function(collectionItem, callback) {
            var childScope, item, track, _i, _len;

            track = getTrackFromItem(collectionItem);
            for (_i = 0, _len = slidesItems.length; _i < _len; _i++) {
              item = slidesItems[_i];
              if (!(item.track === track)) {
                continue;
              }
              throw "Duplicates in a repeater are not allowed. Use 'track by' expression to specify unique keys.";
              break;
            }
            childScope = $scope.$new();
            childScope[indexString] = collectionItem;
            return linker(childScope, function(clone) {
              var slideItem;

              slideItem = {
                track: track,
                collectionItem: collectionItem,
                childScope: childScope,
                element: clone
              };
              slidesItems.push(slideItem);
              return typeof callback === "function" ? callback(slideItem) : void 0;
            });
          };
          removeSlide = function(collectionItem) {
            var i, item, slideItem, track, _i, _len;

            track = getTrackFromItem(collectionItem);
            for (_i = 0, _len = slidesItems.length; _i < _len; _i++) {
              item = slidesItems[_i];
              if (item.track === track) {
                slideItem = item;
              }
            }
            if (slideItem == null) {
              return;
            }
            i = slidesItems.indexOf(slideItem);
            if (i < 0) {
              return;
            }
            slidesItems = slidesItems.slice(i, 1);
            slideItem.childScope.$destroy();
            return slideItem;
          };
          return $scope.$watchCollection(collectionString, function(collection) {
            var attrKey, attrVal, c, e, n, options, slider, slides, toAdd, toRemove, _i, _j, _k, _len, _len1, _len2;

            if (flexsliderDiv != null) {
              slider = flexsliderDiv.data('flexslider');
              if (collection == null) {
                collection = [];
              }
              toAdd = collection.filter(function(e) {
                return oldCollection.indexOf(e) < 0;
              });
              toRemove = (oldCollection != null ? oldCollection : []).filter(function(e) {
                return collection.indexOf(e) < 0;
              });
              for (_i = 0, _len = toRemove.length; _i < _len; _i++) {
                e = toRemove[_i];
                e = removeSlide(e);
                slider.removeSlide(e.element);
              }
              for (_j = 0, _len1 = toAdd.length; _j < _len1; _j++) {
                e = toAdd[_j];
                addSlide(e, function(item) {
                  var idx;

                  idx = collection.indexOf(e);
                  if (idx === (oldCollection != null ? oldCollection.length : void 0)) {
                    idx = void 0;
                  }
                  return $scope.$evalAsync(function() {
                    return slider.addSlide(item.element, idx);
                  });
                });
              }
              oldCollection = collection.slice(0);
              return;
            }
            if (collection == null) {
              return;
            }
            oldCollection = collection.slice(0);
            slides = angular.element('<ul class="slides"></ul>');
            flexsliderDiv = angular.element('<div class="flexslider"></div>');
            flexsliderDiv.append(slides);
            $element.append(flexsliderDiv);
            for (_k = 0, _len2 = collection.length; _k < _len2; _k++) {
              c = collection[_k];
              addSlide(c, function(item) {
                return slides.append(item.element);
              });
            }
            options = {};
            for (attrKey in attr) {
              attrVal = attr[attrKey];
              if (attrKey.indexOf('$') === 0) {
                continue;
              }
              if (!isNaN(n = parseInt(attrVal))) {
                options[attrKey] = n;
                continue;
              }
              if (attrVal === 'false' || attrVal === 'true') {
                options[attrKey] = attrVal === 'true';
                continue;
              }
              if (attrKey === 'start' || attrKey === 'before' || attrKey === 'after' || attrKey === 'end' || attrKey === 'added' || attrKey === 'removed') {
                options[attrKey] = (function(attrVal) {
                  var f;

                  f = $parse(attrVal);
                  return function() {
                    return $scope.$apply(function() {
                      return f($scope, {});
                    });
                  };
                })(attrVal);
                continue;
              }
              options[attrKey] = attrVal;
            }
            return $timeout((function() {
              return flexsliderDiv.flexslider(options);
            }), 0);
          });
        };
      }
    };
  });

}).call(this);
